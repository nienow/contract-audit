contract WexStrat is Ownable, Pausable {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    /**
     * @dev Tokens Used:
     * {wbnb} - Required for liquidity routing when doing swaps.
     * {wex} - Token generated by staking our funds. In this case it's the CAKEs token.
     * {eleven} - ElevenFinance token, used to send funds to the treasury.
     * {lpPair} - Token that the strategy maximizes. The same token that users deposit in the vault.
     * {lpToken0, lpToken1} - Tokens that the strategy maximizes. IPanwexPair tokens
     */
    address constant public wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    address constant public wex = address(0xa9c41A46a6B3531d28d5c32F6633dd2fF05dFB90);
    address constant public busd = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);
    address public lpPair;
    address public lpToken0;
    address public lpToken1;
    address public buybackstrat;


    mapping(address => bool) public harvesters;


    function setHarvestor(address _add, bool _bool) onlyOwner external{
        harvesters[_add] = _bool;
    }

    function setBuybackStrat(address _add) onlyOwner external{
        buybackstrat = _add;
    }


    /**
     * @dev Third Party Contracts:
     * {unirouter} - PanwexSwap unirouter
     * {masterchef} - MasterChef contract
     * {poolId} - MasterChef pool id
     */
    //    address constant public unirouter  = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    address constant public unirouterwex  = address(0xD48745E39BbED146eEC15b79cBF964884F9877c2);
    address constant public masterchef = address(0x22fB2663C7ca71Adc2cc99481C77Aaf21E152e2D);
    uint public poolId;

    /**
     * @dev Eleven Contracts:
     * {rewards} - Reward pool where the strategy fee earnings will go.
     * {treasury} - Address of the ElevenFinance treasury
     * {vault} - Address of the vault that controls the strategy's funds.
     */
    address public vault;

    /**
     * @dev Distribution of fees earned. This allocations relative to the % implemented on doSplit().
     * Current implementation separates 1.5% for fees.
     *
     * {REWARDS_FEE} - 0.625% goes to ELEVEN holders through the {rewards} pool.
     * {CALL_FEE} - 0.25% goes to whoever executes the harvest function as gas subsidy.
     * {TREASURY_FEE} - 0.25% goes to the treasury.
     * {MAX_FEE} - Aux const used to safely calc the correct amounts.
     *
     * {WITHDRAWAL_FEE} - Fee taxed when a user withdraws funds. 10 === 0.1% fee.
     * {WITHDRAWAL_MAX} - Aux const used to safely calc the correct amounts.
     */

    uint constant public WITHDRAWAL_FEE = 10;
    uint constant public WITHDRAWAL_MAX = 10000;

    /**
     * @dev Routes we take to swap tokens using PanwexSwap.
     * {wexToWbnbRoute} - Route we take to get from {wex} into {wbnb}.
     * {wbnbToElevenRoute} - Route we take to get from {wbnb} into {eleven}.
     * {wexToLp0Route} - Route we take to get from {wex} into {lpToken0}.
     * {wexToLp1Route} - Route we take to get from {wex} into {lpToken1}.
     */
    address[] public wexToWbnbRoute = [wex, wbnb];
    address[] public wexToLp0Route;
    address[] public wexToLp1Route;

    /**
     * @dev Event that is fired each time someone harvests the strat.
     */
    event StratHarvest(address indexed harvester);

    /**
     * @dev Initializes the strategy with the token to maximize.
     */
    constructor(address _lpPair, uint _pid, address _vault) public {
        lpPair = _lpPair;
        lpToken0 = IPanwexPair(lpPair).token0();
        lpToken1 = IPanwexPair(lpPair).token1();
        poolId = _pid;
        vault = _vault;



        if (lpToken0 == busd) {
            wexToLp0Route = [wex, wbnb, busd];
        } else if (lpToken0 != wex) {
            wexToLp0Route = [wex, wbnb, busd, lpToken0];
        }

        if (lpToken1 == busd) {
            wexToLp1Route = [wex, wbnb, busd];
        } else if (lpToken1 != wex) {
            wexToLp1Route = [wex, wbnb, busd, lpToken1];
        }

        IERC20(lpPair).safeApprove(masterchef, uint(-1));
        IERC20(wex).safeApprove(unirouterwex, uint(-1));
        IERC20(wbnb).safeApprove(unirouterwex, uint(-1));

        IERC20(lpToken0).safeApprove(unirouterwex, 0);
        IERC20(lpToken0).safeApprove(unirouterwex, uint(-1));

        IERC20(lpToken1).safeApprove(unirouterwex, 0);
        IERC20(lpToken1).safeApprove(unirouterwex, uint(-1));
    }

    /**
     * @dev Function that puts the funds to work.
     * It gets called whenever someone deposits in the strategy's vault contract.
     * It deposits {lpPair} in the MasterChef to farm {wex}
     */
    function deposit() public whenNotPaused {
        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));

        if (pairBal > 0) {
            IMasterChef(masterchef).deposit(poolId, pairBal, true);
        } else {
            IMasterChef(masterchef).claim(poolId);
        }
    }

    /**
     * @dev Withdraws funds and sents them back to the vault.
     * It withdraws {lpPair} from the MasterChef.
     * The available {lpPair} minus fees is returned to the vault.
     */
    function withdraw(uint256 _amount) external {
        require(msg.sender == vault, "!vault");

        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));

        if (pairBal < _amount) {
            IMasterChef(masterchef).withdraw(poolId, _amount.sub(pairBal), true);
            pairBal = IERC20(lpPair).balanceOf(address(this));
        }

        if (pairBal > _amount) {
            pairBal = _amount;
        }

        uint256 withdrawalFee = pairBal.mul(WITHDRAWAL_FEE).div(WITHDRAWAL_MAX);
        IERC20(lpPair).safeTransfer(vault, pairBal.sub(withdrawalFee));
    }

    /**
     * @dev Core function of the strat, in charge of collecting and re-investing rewards.
     * 1. It claims rewards from the MasterChef.
     * 2. It charges the system fees to simplify the split.
     * 3. It swaps the {wex} token for {lpToken0} & {lpToken1}
     * 4. Adds more liquidity to the pool.
     * 5. It deposits the new LP tokens.
     */
    function harvest() external whenNotPaused {
        require(!Address.isContract(msg.sender), "!contract");
        IMasterChef(masterchef).claim(poolId);
        chargeFees();
        addLiquidity();
        deposit();

        emit StratHarvest(msg.sender);
    }

    function getBPSFee() public view returns (uint) {
        return Buybackstrat(buybackstrat).defaultFeeBPS();
    }

    /**
     * @dev Takes out 1.5% as system fees from the rewards.
     * 0.25% -> Call Fee
     * 0.25% -> Treasury fee
     * 0.625% -> ELEVEN Holders
     * 0.375% -> Burn Fee
     */
    function chargeFees() internal {
        if(buybackstrat!=address(0)){
            address receiveFee;
            if(harvesters[msg.sender]) receiveFee = msg.sender;
            else receiveFee = 0x6B3C201575aCe5Ed6B67df5c91E40B98c0D2BE36;
            uint toSell = IERC20(wex).balanceOf(address(this)).mul(getBPSFee()).div(10000);
            IERC20(wex).transfer(buybackstrat, toSell);
            Buybackstrat(buybackstrat).chargeFees(wex, receiveFee);
        }
    }

    /**
     * @dev Swaps {wex} for {lpToken0}, {lpToken1} & {wbnb} using PanwexSwap.
     */
    function addLiquidity() internal {
        uint256 wexHalf = IERC20(wex).balanceOf(address(this)).div(2);

        if (lpToken0 != wex) {
            IPanwexRouter(unirouterwex).swapExactTokensForTokensSupportingFeeOnTransferTokens(wexHalf, 0, wexToLp0Route, address(this), now.add(600));
        }

        if (lpToken1 != wex) {
            IPanwexRouter(unirouterwex).swapExactTokensForTokensSupportingFeeOnTransferTokens(wexHalf, 0, wexToLp1Route, address(this), now.add(600));
        }

        uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));
        uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));
        IPanwexRouter(unirouterwex).addLiquidity(lpToken0, lpToken1, lp0Bal, lp1Bal, 1, 1, address(this), now.add(600));
    }

    /**
     * @dev Function to calculate the total underlaying {lpPair} held by the strat.
     * It takes into account both the funds in hand, as the funds allocated in the MasterChef.
     */
    function balanceOf() public view returns (uint256) {
        return balanceOfLpPair().add(balanceOfPool());
    }

    /**
     * @dev It calculates how much {lpPair} the contract holds.
     */
    function balanceOfLpPair() public view returns (uint256) {
        return IERC20(lpPair).balanceOf(address(this));
    }

    /**
     * @dev It calculates how much {lpPair} the strategy has allocated in the MasterChef
     */
    function balanceOfPool() public view returns (uint256) {
        (uint256 _amount, , ) = IMasterChef(masterchef).userInfo(poolId, address(this));
        return _amount;
    }

    /**
     * @dev Function that has to be called as part of strat migration. It sends all the available funds back to the
     * vault, ready to be migrated to the new strat.
     */
    function retireStrat() external onlyOwner {
        panic();

        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));
        IERC20(lpPair).transfer(vault, pairBal);
    }

    /**
     * @dev Pauses deposits. Withdraws all funds from the MasterChef, leaving rewards behind
     */
    function panic() public onlyOwner {
        pause();
        IMasterChef(masterchef).emergencyWithdraw(poolId);
    }

    /**
     * @dev Pauses the strat.
     */
    function pause() public onlyOwner {
        _pause();
        IERC20(lpPair).safeApprove(masterchef, 0);
        IERC20(wex).safeApprove(unirouterwex, 0);
        IERC20(wbnb).safeApprove(unirouterwex, 0);
        IERC20(lpToken0).safeApprove(unirouterwex, 0);
        IERC20(lpToken1).safeApprove(unirouterwex, 0);
    }

    /**
     * @dev Unpauses the strat.
     */
    function unpause() external onlyOwner {
        _unpause();

        IERC20(lpPair).safeApprove(masterchef, uint(-1));
        IERC20(wex).safeApprove(unirouterwex, uint(-1));
        IERC20(wbnb).safeApprove(unirouterwex, uint(-1));

        IERC20(lpToken0).safeApprove(unirouterwex, 0);
        IERC20(lpToken0).safeApprove(unirouterwex, uint(-1));

        IERC20(lpToken1).safeApprove(unirouterwex, 0);
        IERC20(lpToken1).safeApprove(unirouterwex, uint(-1));
    }
}